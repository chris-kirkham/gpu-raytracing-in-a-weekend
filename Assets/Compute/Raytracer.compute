// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Raytrace

struct Material
{
    float4 col;
    float smoothness;
    float emissive;
    int isMetal;
};

struct Ray
{
    float3 origin;
    float3 direction;
    
    float3 PointAlongRay(float t)
    {
        return origin + (direction * t);
    }
};

struct RaycastHit
{
    float t;
    float3 p;
    float3 normal;
    Material mat;
};

struct MaterialBounce //light bounce from a material
{
    Ray scattered;
    float4 attenuation;
};

//--material functions--
float BadRand(float2 uv)
{
    return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
}
float3 RandomInUnitSphere(float3 spherePos)
{
    float3 p;
    do
    {
        p = 2 * float3(BadRand(spherePos.xy), BadRand(spherePos.yz), BadRand(spherePos.zx)) - 1;
    } while (dot(p, p) >= 1);
    
    return p;
}
//From the given raycast hit, return a random direction determined by a point inside a unit sphere whose centre is hit.point + hit.normal
float3 Diffuse(RaycastHit hit)
{
    float3 tangentSphereCentre = hit.p + hit.normal;
    return normalize(tangentSphereCentre + RandomInUnitSphere(tangentSphereCentre)) - hit.p;
}

//Reflect the incoming ray off the hit surface
float3 Reflect(float3 incomingRayDir, float3 surfaceNormal, float smoothness)
{
    return incomingRayDir - 2 * dot(incomingRayDir, surfaceNormal) * surfaceNormal;
}
  
//get the material's bounced light info
MaterialBounce Scatter(Ray rayIn, RaycastHit hit)
{
    MaterialBounce bounce;
    Ray scattered;
    scattered.origin = hit.p;
    //scattered.direction = Reflect(rayIn.direction, hit.normal, hit.mat.smoothness); 
    scattered.direction = hit.mat.isMetal > 0 ? Reflect(rayIn.direction, hit.normal, hit.mat.smoothness) : Diffuse(hit);
    bounce.scattered = scattered;
    bounce.attenuation = hit.mat.col;
        
    return bounce;
}

//shape structs
struct Sphere
{
    float3 pos;
    float r;
    Material mat;
};

//shapes
StructuredBuffer<Sphere> spheres;
int numSpheres;

//camera
float3 camPos;
float3 camRight, camUp, camForward;
float camNearClipDist;
float camNearClipWidth, camNearClipHeight;
float screenWidthWS, screenHeightWS;

//output RenderTexture
RWTexture2D<float4> outputTex;
int outputTexWidth, outputTexHeight;

//returns point on ray at which sphere was hit (so hit point will be rayOrigin + (t * rayDir)
bool HitSphere(Sphere s, Ray ray, float tMin, float tMax, out RaycastHit hit)
{
    float3 originToSphereCentre = ray.origin - s.pos;
    float a = dot(ray.direction, ray.direction);
    float b = 2 * dot(originToSphereCentre, ray.direction);
    float c = dot(originToSphereCentre, originToSphereCentre) - (s.r * s.r);
    float discriminant = (b * b) - (4 * a * c);
 
    if(discriminant >= 0)
    {
        float sqrtDiscriminant = sqrt(discriminant);
        float temp = (-b - sqrtDiscriminant) / (2 * a);
        if(temp < tMax && temp > tMin)
        {
            hit.t = temp;
            hit.p = ray.PointAlongRay(temp);
            hit.normal = (hit.p - s.pos) / s.r;
            hit.mat = s.mat;
            return true;
        }
        
        temp = (-b + sqrtDiscriminant) / (2 * a);
        if (temp < tMax && temp > tMin)
        {
            hit.t = temp;
            hit.p = ray.PointAlongRay(temp);
            hit.normal = (hit.p - s.pos) / s.r;
            hit.mat = s.mat;
            return true;
        }
    }
    
    return false;
}

float4 Colour(Ray ray, out RaycastHit hit, out bool hasHit)
{
    //raycast to get closest hit sphere, if any
    int idxOfNearest = -1;
    float tMin = 0.001f; //needs to be slightly >0 to avoid "shadow acne" caused by self-intersection 
    float nearestZ = 1000000;
    float nearestT = 100000;
    RaycastHit tempHit;
    for (int i = 0; i < numSpheres; i++)
    {
        Sphere s = spheres[i];
        if (HitSphere(s, ray, tMin, nearestT, tempHit) && tempHit.t < nearestT) // - HitSphere only returns true if this is true
        {
            hit = tempHit;
            nearestT = hit.t;
            idxOfNearest = i;
        }
    }
    
    //if we hit sphere 
    if(idxOfNearest >= 0)
    {
        hasHit = true;
        return spheres[idxOfNearest].mat.col;
    }
    else
    {
        hasHit = false;
        //sky colour
        float t = ray.direction * 0.5f + 0.5f;
        return (1 - t) + (t * float4(0.5f, 0.7f, 1, 1));
    }
}

float4 TraceRay(Ray ray, int maxBounces)
{
    bool hasHit;
    RaycastHit hit;
    float4 col = Colour(ray, hit, hasHit);
    int i = 0;
    
    Ray prevRay = ray;
    while (hasHit && i < maxBounces)
    {
        MaterialBounce bounce = Scatter(prevRay, hit);
        col *= Colour(bounce.scattered, hit, hasHit) * bounce.attenuation;
        prevRay = bounce.scattered;
        i++;
    }
    
    return col;
}

[numthreads(8,8,1)]
void Raytrace (uint3 id : SV_DispatchThreadID)
{
    float2 normalisedPixelPos = float2((float)id.x / outputTexWidth, (float)id.y / outputTexHeight) - 0.5f; //pixel position normalised to [(-0.5, -0,5), (0.5, 0.5)]
    float3 pixelPosWS = camPos + (camForward * camNearClipDist) + (camRight * normalisedPixelPos.x * camNearClipWidth) + (camUp * normalisedPixelPos.y * camNearClipHeight);
    float3 rayDir = normalize(pixelPosWS - camPos);
    
    Ray ray;
    ray.origin = camPos;
    ray.direction = rayDir;
    outputTex[id.xy] = TraceRay(ray, 32);
}